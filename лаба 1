> Rukhshona:
1

\#\#\# Метод деления пополам \(бисекция\)

\#\#\#\# На C\+\+:#include <iostream>
#include <cmath>

double func(double x) {
    return x*x - 4; // Пример функции: x^2 - 4
}

double bisection(double a, double b, double eps) {
    if (func(a) * func(b) >= 0) {
        std::cout << "Неверный интервал\\n";
        return -1;
    }

    double c = a;
    while ((b-a) >= eps) {
        c = (a+b)/2;
        if (func(c) == 0.0)
            break;
        else if (func(c)*func(a) < 0)
            b = c;
        else
            a = c;
    }
    return c;
}

int main() {
    double a = 1, b = 3, eps = 0.01;
    std::cout << "Корень: " << bisection(a, b, eps) << std::endl;
    return 0;
}

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def bisection(a, b, eps):
    if func(a) * func(b) >= 0:
        print("Неверный интервал")
        return -1

    c = a
    while (b-a) >= eps:
        c = (a+b)/2
        if func(c) == 0.0:
            break
        elif func(c)*func(a) < 0:
            b = c
        else:
            a = c
    return c

a, b, eps = 1, 3, 0.01
print("Корень:", bisection(a, b, eps))

\#\#\# Метод простых итераций

\#\#\#\# На C\+\+:// Реализация метода простых итераций в С++ можно осуществить аналогично методу деления пополам,
// но с использованием итерационной формулы для поиска корня.

// Пример итерационной формулы:
// x_{n+1} = g(x_n), где g(x) - функция преобразования

// Реализация метода простых итераций требует выбора подходящей функции преобразования.

\#\#\#\# На Python:# Реализация метода простых итераций на Python
# Предположим, что у нас есть уравнение вида x^2 - 4 = 0

def g(x):
    return (x + 4/x) / 2  # Выбор функции преобразования

def simple_iteration(guess, tol, max_iter):
    for i in range(max_iter):
        next_guess = g(guess)
        if abs(next_guess - guess) < tol:
            return next_guess
        guess = next_guess
    return guess

initial_guess = 1.5
tolerance = 0.0001
max_iterations = 1000

root = simple_iteration(initial_guess, tolerance, max_iterations)
print("Корень:", root)

\#\#\# Метод Ньютона

\#\#\#\# На C\+\+:// Реализация метода Ньютона в С++ требует вычисления производной функции.

// Пример реализации метода Ньютона:
// Для уравнения f(x) = x^2 - 4 ищем корень.

#include <iostream>
#include <cmath>

double func(double x) {
    return x*x - 4;
}

double derivative(double x) {
    return 2*x; // Производная функции x^2 - 4
}

double newtonRaphson(double x, double eps) {
    double h = func(x) / derivative(x);
    while (abs(h) >= eps) {
        h = func(x)/derivative(x);
        x = x - h;
    }
    return x;
}

int main() {
    double x0 = 3, eps = 0.0001;
    std::cout << "Корень: " << newtonRaphson(x0, eps) << std::endl;
    return 0;
}

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def derivative(x):
    return 2*x

def newton_raphson(x, eps):
    h = func(x) / derivative(x)
    while abs(h) >= eps:
        h = func(x)/derivative(x)
        x = x - h
    return x

x0, eps = 3, 0.0001
print("Корень:", newton_raphson(x0, eps))

\#\#\# Метод секущих

\#\#\#\# На C\+\+:// Реализация метода секущих в С++ аналогична методу Ньютона,
// но вместо вычисления производной используется разностное отношение.

// Пример реализации метода секущих:

#include <iostream>
#include <cmath>

double func(double x) {
    return x*x - 4;
}

double secant(double x1, double x2, double eps) {
    double f1 = func(x1);
    double f2 = func(x2);
    double x3;

    do {
        x3 = (x1*f2 - x2*f1)/(f2-f1);
        f1 = f2;
        f2 = func(x3);
        x1 = x2;
        x2 = x3;
    } while (abs(f2) >= eps);

    return x3;
}

int main() {
    double x1 = 1, x2 = 3, eps = 0.0001;
    std::cout << "Корень: " << secant(x1, x2, eps) << std::endl;
    return 0;

}

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def secant(x1, x2, eps):
    f1 = func(x1)
    f2 = func(x2)
    
    while abs(f2) >= eps:
        x3 = (x1*f2 - x2*f1)/(f2-f1)
        f1 = f2
        f2 = func(x3)
        x1 = x2
        x2 = x3
    
    return x3

x1, x2, eps = 1, 3, 0.0001

> Rukhshona:
print("Корень:", secant(x1, x2, eps))

\#\#\# Метод парабол

\#\#\#\# На C\+\+:// Реализация метода парабол в С++ требует интерполяции функции квадратичным полиномом.

// Пример реализации метода парабол:

#include <iostream>
#include <cmath>

double func(double x) {
    return x*x - 4;
}

double parabolicInterpolation(double x0, double x1, double x2, double eps) {
    double f0 = func(x0);
    double f1 = func(x1);
    double f2 = func(x2);
    
    double a0 = f0;
    double a1 = (f1 - f0)/(x1 - x0);
    
    double a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0));
    
    while (abs(a1) >= eps) {
        double discriminant = a1*a1 - 4*a0*a2;
        
        // Выбираем корень ближе к x1
        double root = (-a1 + sqrt(discriminant))/(2*a2);
        
        if (func(root)*func(x1) < 0)
            x0 = root;
        else
            x2 = root;

        f0 = func(x0);
        f1 = func(x1);
        f2 = func(x2);

        a0 = f0;
        a1 = (f1 - f0)/(x1 - x0);
        a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0));
    }

    return root;
}

int main() {
    double x0 = 1, x1 = 2, x2 = 3, eps = 0.0001;
    std::cout << "Корень: " << parabolicInterpolation(x0, x1, x2, eps) << std::endl;
    return 0;
}

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def parabolic_interpolation(x0, x1, x2, eps):
    f0 = func(x0)
    f1 = func(x1)
    f2 = func(x2)
    
    a0 = f0
    a1 = (f1 - f0)/(x1 - x0)
    
    a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0))
    
    while abs(a1) >= eps:
        discriminant = a1*a1 - 4*a0*a2
        
        # Выбираем корень ближе к x1
        root = (-a1 + (discriminant)**(0.5))/(2*a2)
        
        if func(root)*func(x1) < 0:
            x0 = root
        else:
            x2 = root
            
        f0 = func(x0)
        f1 = func(x1)
        f2 = func(x2)

        a0 = f0
        a1 = (f1 - f0)/(x1 - x0)
        a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0))
    
    return root

x0, x1, x2, eps = 1, 2, 3, 0.0001
print("Корень:", parabolic_interpolation(x0, x1, x2, eps))

\#\#\# Работа с комплексными числами

\#\#\#\# Арифметические операции с комплексными числами

На C\+\+:#include <iostream>
#include <complex>

int main() {
    std::complex<double> z1(4.0, 3.0);
    std::complex<double> z2(6.0, -5.0);

    std::complex<double> sum_result = z1 + z2;
    std::complex<double> diff_result = z1 - z2;
    std::complex<double> prod_result = z1 * z2;

    std::cout << "Сумма: " << sum_result << std::endl;
    std::cout << "Разность: " << diff_result << std::endl;
    std::cout << "Произведение: " << prod_result << std::endl;

    return 0;
}

На Python:z1 = complex(4.0, 3.0)
z2 = complex(6.0, -5.0)

sum_result = z1 + z2
diff_result= z1 - z2
prod_result= z1 * z2

print("Сумма:", sum_result)
print("Разность:", diff_result)
print("Произведение:", prod_result)

\#\#\#\# Возведение в степень и извлечение корней комплексных чисел

На C\+\+:#include <iostream>
#include <complex>

int main() {
   std::complex<double> z(4.0, 3.0);
   int n=3; // Степень корня
   
   std::complex<double> power_result= pow(z,n);
   std::complex<double> sqrt_result= sqrt(z);

   std::cout << "Возведение в степень: " << power_result << std::endl;
   std::cout << "Извлечение корня: " << sqrt_result << std::endl;

   return 0;
}

На Python:z= complex(4.0,3.0)
n=3 # Степень корня

power_result= z**n
sqrt_result= z**0.5

print("Возведение в степень:", power_result)
print("Извлечение ко }

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def secant(x1, x2, eps):
    f1 = func(x1)
    f2 = func(x2)
    
    while abs(f2) >= eps:
        x3 = (x1*f2 - x2*f1)/(f2-f1)
        f1 = f2
        f2 = func(x3)
        x1 = x2
        x2 = x3
    
    return x3

x1, x2, eps = 1, 3, 0.0001
print("Корень:", secant(x1, x2, eps))

\#\#\# Метод парабол

\#\#\#\# На C\+\+:// Реализация метода парабол в С++ требует интерполяции функции квадратичным полиномом.

// Пример реализации метода парабол:

#include <iostream>
#include <cmath>

double func(double x) {
    return x*x - 4;
}

> Rukhshona:
double parabolicInterpolation(double x0, double x1, double x2, double eps) {
    double f0 = func(x0);
    double f1 = func(x1);
    double f2 = func(x2);
    
    double a0 = f0;
    double a1 = (f1 - f0)/(x1 - x0);
    
    double a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0));
    
    while (abs(a1) >= eps) {
        double discriminant = a1*a1 - 4*a0*a2;
        
        // Выбираем корень ближе к x1
        double root = (-a1 + sqrt(discriminant))/(2*a2);
        
        if (func(root)*func(x1) < 0)
            x0 = root;
        else
            x2 = root;

        f0 = func(x0);
        f1 = func(x1);
        f2 = func(x2);

        a0 = f0;
        a1 = (f1 - f0)/(x1 - x0);
        a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0));
    }

    return root;
}

int main() {
    double x0 = 1, x1 = 2, x2 = 3, eps = 0.0001;
    std::cout << "Корень: " << parabolicInterpolation(x0, x1, x2, eps) << std::endl;
    return 0;
}

\#\#\#\# На Python:def func(x):
    return x**2 - 4

def parabolic_interpolation(x0, x1, x2, eps):
    f0 = func(x0)
    f1 = func(x1)
    f2 = func(x2)
    
    a0 = f0
    a1 = (f1 - f0)/(x1 - x0)
    
    a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0))
    
    while abs(a1) >= eps:
        discriminant = a1*a1 - 4*a0*a2
        
        # Выбираем корень ближе к x1
        root = (-a1 + (discriminant)**(0.5))/(2*a2)
        
        if func(root)*func(x1) < 0:
            x0 = root
        else:
            x2 = root
            
        f0 = func(x0)
        f1 = func(x1)
        f2 = func(x2)

        a0 = f0
        a1 = (f1 - f0)/(x1 - x0)
        a2 = (1/(x2-x1)) * ((f2-f0)/(x2-x0) - (f1-f0)/(x1-x0))
    
    return root

x0, x1, x2, eps = 1, 2, 3, 0.0001
print("Корень:", parabolic_interpolation(x0, x1, x2, eps))

\#\#\# Работа с комплексными числами

\#\#\#\# Арифметические операции с комплексными числами

На C\+\+:#include <iostream>
#include <complex>

int main() {
    std::complex<double> z1(4.0, 3.0);
    std::complex<double> z2(6.0, -5.0);

    std::complex<double> sum_result = z1 + z2;
    std::complex<double> diff_result = z1 - z2;
    std::complex<double> prod_result = z1 * z2;

    std::cout << "Сумма: " << sum_result << std::endl;
    std::cout << "Разность: " << diff_result << std::endl;
    std::cout << "Произведение: " << prod_result << std::endl;

    return 0;
}

На Python:z1 = complex(4.0, 3.0)
z2 = complex(6.0, -5.0)

sum_result = z1 + z2
diff_result= z1 - z2
prod_result= z1 * z2

print("Сумма:", sum_result)
print("Разность:", diff_result)
print("Произведение:", prod_result)

\#\#\#\# Возведение в степень и извлечение корней комплексных чисел

На C\+\+:#include <iostream>
#include <complex>

int main() {
   std::complex<double> z(4.0, 3.0);
   int n=3; // Степень корня
   
   std::complex<double> power_result= pow(z,n);
   std::complex<double> sqrt_result= sqrt(z);

   std::cout << "Возведение в степень: " << power_result << std::endl;
   std::cout << "Извлечение корня: " << sqrt_result << std::endl;

   return 0;
}
