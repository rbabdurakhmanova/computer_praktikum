### Реализация точки в пространстве

#### На C++:
C++

#include <iostream>

class Point3D {
private:
    double x, y, z;

public:
    Point3D(double x, double y, double z) : x(x), y(y), z(z) {}

    double distanceTo(Point3D other) {
        double dx = x - other.x;
        double dy = y - other.y;
        double dz = z - other.z;
        return sqrt(dx*dx + dy*dy + dz*dz);
    }
};

int main() {
    Point3D p1(1.0, 2.0, 3.0);
    Point3D p2(4.0, 5.0, 6.0);

    std::cout << "Расстояние между точками: " << p1.distanceTo(p2) << std::endl;

    return 0;
}

#### На Python:
Python

import math

class Point3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def distance_to(self, other):
        dx = self.x - other.x
        dy = self.y - other.y
        dz = self.z - other.z
        return math.sqrt(dx*dx + dy*dy + dz*dz)

p1 = Point3D(1.0, 2.0, 3.0)
p2 = Point3D(4.0, 5.0, 6.0)

print("Расстояние между точками:", p1.distance_to(p2))

### Реализация прямой линии

#### На C++:
C++

#include <iostream>
#include <cmath>

class Line2D {
private:
    double slope;
    double intercept;

public:
    Line2D(double slope, double intercept) : slope(slope), intercept(intercept) {}

    double distanceFromPoint(double x, double y) {
        return fabs(slope * x - y + intercept) / sqrt(slope * slope + 1);
    }
};

int main() {
    Line2D line(2.0, 3.0);
    std::cout << "Расстояние от точки (1, 2) до прямой: " << line.distanceFromPoint(1.0, 2.0) << std::endl;

    return 0;
}

#### На Python:
Python

import math

class Line2D:
    def __init__(self, slope, intercept):
        self.slope = slope
        self.intercept = intercept

    def distance_from_point(self, x, y):
        return abs(self.slope * x - y + self.intercept) / math.sqrt(self.slope * self.slope + 1)

line = Line2D(2.0, 3.0)
print("Расстояние от точки (1, 2) до прямой:", line.distance_from_point(1.0, 2.0))
