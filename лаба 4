### Метод Гаусса

#### На C++:
C++

#include <iostream>
#include <vector>

void gaussianElimination(std::vector<std::vector<double>>& A, std::vector<double>& b) {
    int n = A.size();

    for (int i = 0; i < n; ++i) {
        // Приведение к верхнетреугольному виду
        for (int j = i + 1; j < n; ++j) {
            double ratio = A[j][i] / A[i][i];
            for (int k = i; k < n; ++k) {
                A[j][k] -= ratio * A[i][k];
            }
            b[j] -= ratio * b[i];
        }
    }

    // Обратный ход
    std::vector<double> x(n);
    for (int i = n - 1; i >= 0; --i) {
        x[i] = b[i];
        for (int j = i + 1; j < n; ++j) {
            x[i] -= A[i][j] * x[j];
        }
        x[i] /= A[i][i];
    }

    // Вывод решения
    std::cout << "Решение СЛАУ: ";
    for (int i = 0; i < n; ++i) {
        std::cout << x[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::vector<std::vector<double>> A = {{2, 1, -1}, {-3, -1, 2}, {-2, 1, 2}};
    std::vector<double> b = {8, -11, -3};

    gaussianElimination(A, b);

    return 0;
}

#### На Python:
Python

import numpy as np

def gaussian_elimination(A, b):
    n = len(A)

    for i in range(n):
        # Приведение к верхнетреугольному виду
        for j in range(i + 1, n):
            ratio = A[j][i] / A[i][i]
            A[j][i:] -= ratio * A[i][i:]
            b[j] -= ratio * b[i]

    # Обратный ход
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = b[i]
        for j in range(i+1, n):
            x[i] -= A[i][j] * x[j]
        x[i] /= A[i][i]

    # Вывод решения
    print("Решение СЛАУ:", x)

A = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])
b = np.array([8, -11, -3])

gaussian_elimination(A, b)
